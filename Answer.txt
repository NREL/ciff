import math
nominal_voltage_pu=1.0
dg_kw_set=5000 #kw
pf_set=1.0
pf_set_increment=0.01
nominal_voltage=False

while not nominal_voltage:
    kvar_set=math.sqrt(((dg_kw_set/pf_set)**2)-(dg_kw_set**2))
    cmd('clear')
    cmd('redirect '+os.sys.path[0]+'\\OpenDSS_model_files\\Simple_example_timeseries.dss')
    cmd('new loadshape.solar_daily npts=24 interval=1.0 csvfile='+os.sys.path[0]+'\\OpenDSS_model_files\\solar_daily.txt')
    cmd('new pvsystem.pv1 bus1=c phases=3 kv=33 kva={kva} irradiance=0.98 pmpp={pmpp} kvar={kvar} %cutin=0.05 %cutout=0.05 daily=solar_daily'.format(kva=dg_kw_set, pmpp=dg_kw_set, kvar=kvar_set))
    
    dss.Solution.Hour(12)
    dss.Solution.Solve()
    dss.Circuit.SetActiveBus('c')
    bus_voltage=dss.Bus.PuVoltage()[0]
    print('voltage:',dss.Bus.PuVoltage()[0])

    if bus_voltage>=nominal_voltage_pu:
        print('DG size = {dg}, PF={pf}: \t Nominal voltage at bus C --> {bus_voltage} pu'.format(dg=dg_kw_set, pf=pf_set, bus_voltage=bus_voltage))
        nominal_voltage=True

    pf_set=pf_set-pf_set_increment
    
voltage_pu_solar=[]
for bus in dss.Circuit.AllBusNames():
    dss.Circuit.SetActiveBus(bus)
    voltage_pu_solar.append(dss.Bus.PuVoltage()[0])

#plot voltage over distance
fig, ax=plt.subplots(layout='constrained')
ax.plot(distance,voltage_pu, label='Without PV')
ax.plot(distance, voltage_pu_solar, label='With PV')
ax.set_title('Voltage Profile')
ax.set_xlabel('Distance from Substation (km)')
ax.set_ylabel('Voltage (pu)')
ax.legend();